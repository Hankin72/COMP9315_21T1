CREATE FUNCTION intset_in(cstring)
   RETURNS intSet
   AS '_OBJWD_/intset'
   LANGUAGE C IMMUTABLE STRICT;


CREATE FUNCTION intset_out(intSet)
   RETURNS cstring
   AS '_OBJWD_/intset'
   LANGUAGE C IMMUTABLE STRICT;

CREATE TYPE intSet (
   internallength = variable,
   input = intset_in,
   output = intset_out
);


------------------------contains i ? S--------------------1
CREATE FUNCTION intset_contains(integer, intSet) RETURNS bool
   AS '_OBJWD_/intset' LANGUAGE C IMMUTABLE STRICT;

CREATE OPERATOR ? (
   leftarg = integer,
   rightarg = intSet,
   procedure = intset_contains
);
---------------------------------------------------



--------------------cardinality------------------------2
CREATE FUNCTION intset_num_elements(intSet) RETURNS integer
   AS '_OBJWD_/intset' LANGUAGE C IMMUTABLE STRICT;

CREATE OPERATOR # (
   rightarg = intSet,
   procedure = intset_num_elements
);
---------------------------------------------



-------------------Superset: left_contains_right------------------3-------
CREATE FUNCTION intset_supset(intSet, intSet) RETURNS bool
   AS '_OBJWD_/intset' LANGUAGE C IMMUTABLE STRICT;

CREATE OPERATOR >@ (
   leftarg = intSet,
   rightarg = intSet,
   procedure = intset_supset
);
--------------------------------------------------------4


---------------subset: left is contained by right ------------
CREATE FUNCTION intset_subset(intSet, intSet) RETURNS bool
   AS '_OBJWD_/intset' LANGUAGE C IMMUTABLE STRICT;

CREATE OPERATOR @< (
   leftarg = intSet,
   rightarg = intSet,
   procedure = intset_subset
);
-----------------------------------------------------------


------------equal----------------------------5
CREATE FUNCTION intset_equal(intSet, intSet) RETURNS bool
   AS '_OBJWD_/intset' LANGUAGE C IMMUTABLE STRICT;

CREATE OPERATOR = (
   leftarg = intSet,
   rightarg = intSet,
   procedure = intset_equal,
   commutator = = ,
   -- leave out negator since we didn't create <> operator
   negator = <> ,
   restrict = eqsel,
   join = eqjoinsel
);
-------------------------------------------


----------------not-equal---------------------------------6
CREATE FUNCTION intset_not_equal(intSet, intSet) RETURNS bool
   AS '_OBJWD_/intset' LANGUAGE C IMMUTABLE STRICT;

CREATE OPERATOR <> (
   leftarg = intSet,
   rightarg = intSet,
   procedure = intset_not_equal,
   commutator = <>,
   -- leave out negator since we didn't create <> operator
   negator = =,
   restrict = neqsel,
   join = neqjoinsel
);
------------------------------------------------------

-----------------set intersection  A  && B---------------------7
CREATE FUNCTION intset_intersection(intSet, intSet) RETURNS intSet
   AS '_OBJWD_/intset' LANGUAGE C IMMUTABLE STRICT;

CREATE OPERATOR && (
   leftarg = intSet,
   rightarg = intSet,
   procedure = intset_intersection
);
---------------------------------------------


-----------------set union A || B  ------------------------8
CREATE FUNCTION intset_union(intSet, intSet) RETURNS intSet
   AS '_OBJWD_/intset' LANGUAGE C IMMUTABLE STRICT;

CREATE OPERATOR || (
   leftarg = intSet,
   rightarg = intSet,
   procedure = intset_union
);
----------------------------------------------------------9-


-----------------set_disjunction---------------------------------
CREATE FUNCTION intset_disjunction(intSet, intSet) RETURNS intSet
   AS '_OBJWD_/intset' LANGUAGE C IMMUTABLE STRICT;

CREATE OPERATOR !! (
   leftarg = intSet,
   rightarg = intSet,
   procedure = intset_disjunction
);
--------------------------------------------------------


----------difference: the set difference, A- B --------------10

CREATE FUNCTION intset_diff(intSet, intSet) RETURNS intSet
   AS '_OBJWD_/intset' LANGUAGE C IMMUTABLE STRICT;

CREATE OPERATOR - (
   leftarg = intSet,
   rightarg = intSet,
   procedure = intset_diff
);
---------------------------------------------------





